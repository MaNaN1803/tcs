#include <iostream>
#include <unordered_map>
#include <vector>
#include <queue>
using namespace std;

int bfs(int start, int target, unordered_map<int, int>& board, vector<int>& dice_rolls) {
    vector<bool> visited(101, false);
    queue<int> q;
    q.push(start);
    visited[start] = true;
    int roll_index = 0;

    while (!q.empty() && roll_index < dice_rolls.size()) {
        int size = q.size();
        while (size--) {
            int current = q.front();
            q.pop();

            for (int i = 1; i <= dice_rolls[roll_index]; ++i) {
                int next_pos = current + i;
                if (next_pos > 100) break;
                if (board.find(next_pos) != board.end()) next_pos = board[next_pos];
                if (next_pos == target) return roll_index + 1;
                if (!visited[next_pos]) {
                    visited[next_pos] = true;
                    q.push(next_pos);
                }
            }
        }
        roll_index++;
    }
    return -1;
}

string findFaultySnakeOrLadder(int N, vector<pair<int, int>>& snakes_and_ladders, vector<int>& dice_rolls, int final_position) {
    unordered_map<int, int> board;
    for (auto& sl : snakes_and_ladders) board[sl.first] = sl.second;

    int original_reach = bfs(1, final_position, board, dice_rolls);
    if (original_reach != -1) return "Not affected";

    for (auto& sl : snakes_and_ladders) {
        swap(board[sl.first], board[sl.second]);
        if (bfs(1, final_position, board, dice_rolls) != -1)
            return (sl.first > sl.second ? "Snake " : "Ladder ") + to_string(sl.second) + " " + to_string(sl.first);
        swap(board[sl.first], board[sl.second]);
    }

    return "Not reachable";
}

int main() {
    int N;
    cin >> N;

    vector<pair<int, int>> snakes_and_ladders(N);
    for (int i = 0; i < N; ++i)
        cin >> snakes_and_ladders[i].first >> snakes_and_ladders[i].second;

    vector<int> dice_rolls;
    string rolls_input;
    cin.ignore();
    getline(cin, rolls_input);
    
    istringstream ss(rolls_input);
    int roll;
    while (ss >> roll)
        dice_rolls.push_back(roll);

    int final_position;
    cin >> final_position;

    cout << findFaultySnakeOrLadder(N, snakes_and_ladders, dice_rolls, final_position) << endl;

    return 0;
}