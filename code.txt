def solve(N, Q, operations):
    from collections import defaultdict
    
    keyValueFreq = {}
    freqToKeys = defaultdict(set)
    minFreq = 0
    results = []

    for op in operations:
        if op[0] == 1:
            key = op[1]
            if key not in keyValueFreq:
                results.append(-1)
            else:
                value, freq = keyValueFreq[key]
                freqToKeys[freq].remove(key)
                if not freqToKeys[freq] and freq == minFreq:
                    minFreq += 1
                keyValueFreq[key] = (value, freq + 1)
                freqToKeys[freq + 1].add(key)
                results.append(value)
        elif op[0] == 2:
            key, value = op[1], op[2]
            if key in keyValueFreq:
                _, freq = keyValueFreq[key]
                freqToKeys[freq].remove(key)
                if not freqToKeys[freq] and freq == minFreq:
                    minFreq += 1
                keyValueFreq[key] = (value, freq + 1)
                freqToKeys[freq + 1].add(key)
            else:
                if len(keyValueFreq) >= N:
                    toRemove = min(freqToKeys[minFreq])
                    freqToKeys[minFreq].remove(toRemove)
                    if not freqToKeys[minFreq]:
                        freqToKeys.pop(minFreq)
                    keyValueFreq.pop(toRemove)
                keyValueFreq[key] = (value, 1)
                freqToKeys[1].add(key)
                minFreq = 1
    return results

N = int(input())
Q = int(input())
operations = [list(map(int, input().split())) for _ in range(Q)]
out = solve(N, Q, operations)
print(' '.join(map(str, out)))