
#include <iostream>
#include <cmath>
#include <vector>
#include <iomanip>

using namespace std;

// Function to calculate the arc distance
double calculateArcDistance(double x1, double y1, double x2, double y2) {
    double straightDistance = sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2));
    // Arc distance = (2 * PI * r) * (angle / 360)
    return (M_PI / 3) * straightDistance;  // 60 degrees = PI/3 radians
}

// Function to calculate surface distance between two points on different faces
double calculateSurfaceDistance(vector<double> p1, vector<double> p2) {
    double dx = abs(p1[0] - p2[0]);
    double dy = abs(p1[1] - p2[1]);
    double dz = abs(p1[2] - p2[2]);

    return dx + dy + dz;  // Manhattan-like distance over cube's surface
}

// Determine if two points are on the same face
bool isSameFace(vector<double> p1, vector<double> p2) {
    return (p1[0] == p2[0] && p1[2] == p2[2]) ||  // Front/Back
           (p1[1] == p2[1] && p1[2] == p2[2]) ||  // Top/Bottom
           (p1[0] == p2[0] && p1[1] == p2[1]);    // Left/Right
}

int main() {
    int n;
    cin >> n;

    vector<vector<double>> points(n, vector<double>(3));
    for (int i = 0; i < n; ++i) {
        char comma;
        cin >> points[i][0] >> comma >> points[i][1] >> comma >> points[i][2];
    }

    double totalDistance = 0.0;

    for (int i = 1; i < n; ++i) {
        if (isSameFace(points[i - 1], points[i])) {
            // Calculate arc distance for same face
            totalDistance += calculateArcDistance(
                points[i - 1][0], points[i - 1][1],
                points[i][0], points[i][1]
            );
        } else {
            // Calculate surface distance for different faces
            totalDistance += calculateSurfaceDistance(points[i - 1], points[i]);
        }

        // Round the distance after every segment
        totalDistance = round(totalDistance * 100) / 100.0;
    }

    cout << fixed << setprecision(2) << totalDistance << endl;

    return 0;
}