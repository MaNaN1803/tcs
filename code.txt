
unordered_map<int, pair<int, int>> keyValueFreq;
    unordered_map<int, set<int>> freqToKeys;
    unordered_map<int, set<int>::iterator> keyIter;
    vector<int> results;
    int minFreq = 0;

    for (auto &op : operations) {
        int type = op[0], key = op[1];
        if (type == 1) {
            if (keyValueFreq.find(key) == keyValueFreq.end()) {
                results.push_back(-1);
            } else {
                int value = keyValueFreq[key].first, freq = keyValueFreq[key].second;
                freqToKeys[freq].erase(keyIter[key]);
                if (freqToKeys[freq].empty() && freq == minFreq) minFreq++;
                keyValueFreq[key].second++;
                freqToKeys[freq + 1].insert(key);
                keyIter[key] = freqToKeys[freq + 1].find(key);
                results.push_back(value);
            }
        } else {
            int value = op[2];
            if (keyValueFreq.find(key) != keyValueFreq.end()) {
                int freq = keyValueFreq[key].second;
                keyValueFreq[key].first = value;
                freqToKeys[freq].erase(keyIter[key]);
                if (freqToKeys[freq].empty() && freq == minFreq) minFreq++;
                keyValueFreq[key].second++;
                freqToKeys[freq + 1].insert(key);
                keyIter[key] = freqToKeys[freq + 1].find(key);
            } else {
                if (keyValueFreq.size() >= N) {
                    int toRemove = *freqToKeys[minFreq].begin();
                    freqToKeys[minFreq].erase(freqToKeys[minFreq].begin());
                    if (freqToKeys[minFreq].empty()) freqToKeys.erase(minFreq);
                    keyValueFreq.erase(toRemove);
                    keyIter.erase(toRemove);
                }
                keyValueFreq[key] = {value, 1};
                freqToKeys[1].insert(key);
                keyIter[key] = freqToKeys[1].find(key);
                minFreq = 1;
            }
        }
    }
    return results;
}


 